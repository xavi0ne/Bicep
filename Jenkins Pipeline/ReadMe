What is Jenkins Pipeline?

Jenkins Pipeline (or simply "Pipeline" with a capital "P") is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.
A continuous delivery (CD) pipeline is an automated expression of your process for getting software from version control right through to your users and customers. 
Every change to your software (committed in source control) goes through a complex process on its way to being released. This process involves building the software in a reliable and repeatable manner, as well as progressing the built software (called a "build") through multiple stages of testing and deployment.
Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code" via the Pipeline domain-specific language (DSL) syntax. 
[1] The definition of a Jenkins Pipeline is written into a text file (called a Jenkinsfile) which in turn can be committed to a projectâ€™s source control repository. 
[2] This is the foundation of "Pipeline-as-code"; treating the CD pipeline a part of the application to be versioned and reviewed like any other code.

Creating a Jenkinsfile and committing it to source control provides a number of immediate benefits:

  Automatically creates a Pipeline build process for all branches and pull requests.
  
  Code review/iteration on the Pipeline (along with the remaining source code).
  
  Audit trail for the Pipeline.

  Single source of truth [3] for the Pipeline, which can be viewed and edited by multiple members of the project.

  While the syntax for defining a Pipeline, either in the web UI or with a Jenkinsfile is the same, it is generally considered best practice to define the Pipeline in a Jenkinsfile and check that in to source control.


How to Install Jenkins on a Windows OS: 
https://www.jenkins.io/doc/book/installing/windows/#prerequisites

Jenkins Handbook: 
https://www.jenkins.io/doc/book/getting-started/

